---
import workExperience from "../data/work-experience.json";
import { formatISODate } from "../utils/date-formatter";
import BaseLayout from "../layouts/BaseLayout.astro";
import ArrowIcon from "../components/ArrowIcon.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

function formatExperienceData(data) {
  return data.map((experience) => {
    return {
      ...experience,
      startDate: formatISODate(experience.startDate),
      endDate: experience.endDate
        ? formatISODate(experience.endDate)
        : "Present",
    };
  });
}

const formattedExperienceData = formatExperienceData(workExperience);
---

<BaseLayout>
  <Header />
  <main
    class="w-full h-[calc(100vh-62px)] lg:h-[calc(100vh-88px)] snap-mandatory snap-y overflow-y-scroll scroll-smooth main-container"
  >
    {
      formattedExperienceData.map(
        ({ company, title, startDate, endDate, description }) => {
          return (
            <section
              class="w-full h-[calc(100vh-62px)] lg:h-[calc(100vh-88px)] snap-center flex flex-col lg:flex-row items-start pt-10 px-6 md:px-10 lg:px-16"
            >
              <div class="w-full mb-4 lg:w-1/2 lg:mb-0 lg:pr-8">
                <h1 class="font-title text-4xl md:text-6xl lg:text-8xl">{company.name}</h1>
              </div>
              <div class="w-full lg:w-1/2">
                <h3 class="font-bold text-xl md:text-2xl lg:text-3xl text-gray-700">
                  {startDate} - {endDate}
                </h3>
                <h2 class="font-extrabold text-2xl md:text-4xl lg:text-5xl mb-3 lg:mb-4">
                  {title}
                </h2>
                <p class="font-normal text-lg md:text-xl lg:text-2xl leading-relaxed">
                  {description}
                </p>
              </div>
            </section>
          );
        }
      )
    }
  </main>
  <div class="fixed left-1/2 transform -translate-x-1/2 z-10 bottom-[100px] md:bottom-10">
    <ArrowIcon direction="up" />
    <ArrowIcon direction="down" />
  </div>
  <Footer />
</BaseLayout>

<script is:inline data-astro-rerun>
  document.addEventListener(
    "astro:page-load",
    () => {
      const mainContainer = document.querySelector(".main-container");
      const moreDownButton = document.querySelector(".more-down");
      const moreUpButton = document.querySelector(".more-up");

      if (!mainContainer || !moreDownButton || !moreUpButton) {
        console.error(
          "One or more elements could not be found in the document."
        );
        return;
      }

      // Function to update arrow visibility based on scroll position
      const updateArrowVisibility = () => {
        const { scrollTop, scrollHeight, clientHeight } = mainContainer;
        const atTop = scrollTop < 10; // Small tolerance for iOS
        const atBottom = scrollTop + clientHeight >= scrollHeight - 10; // Small tolerance for iOS
        
        // Hide up arrow if at the top
        if (atTop) {
          moreUpButton.classList.add("invisible");
        } else {
          moreUpButton.classList.remove("invisible");
        }
        
        // Hide down arrow if at the bottom
        if (atBottom) {
          moreDownButton.classList.add("invisible");
        } else {
          moreDownButton.classList.remove("invisible");
        }
      };

      // Initialize arrow visibility based on initial scroll position
      const initializeArrows = () => {
        updateArrowVisibility();
      };

      let lastScrollTop = 0;
      let isScrolling = false;

      const handleScroll = () => {
        if (isScrolling) return;
        
        const { scrollTop } = mainContainer;
        const scrollingUp = scrollTop < lastScrollTop;

        if (scrollingUp) {
          moreDownButton.classList.remove("invisible");
        }
        
        updateArrowVisibility();
        lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
      };

      // Function to scroll to the next section
      const scrollToNextSection = () => {
        if (isScrolling) return;
        isScrolling = true;
        
        const { scrollTop, clientHeight } = mainContainer;
        const targetScrollTop = Math.ceil(scrollTop / clientHeight) * clientHeight + clientHeight;
        
        mainContainer.scrollTo({
          top: targetScrollTop,
          behavior: "smooth"
        });
        
        // Update arrow visibility after scrolling completes
        setTimeout(() => {
          updateArrowVisibility();
          isScrolling = false;
        }, 500);
      };

      // Function to scroll to the previous section
      const scrollToPreviousSection = () => {
        if (isScrolling) return;
        isScrolling = true;
        
        const { scrollTop, clientHeight } = mainContainer;
        const targetScrollTop = Math.floor(scrollTop / clientHeight) * clientHeight - clientHeight;
        
        mainContainer.scrollTo({
          top: targetScrollTop,
          behavior: "smooth"
        });
        
        // Update arrow visibility after scrolling completes
        setTimeout(() => {
          updateArrowVisibility();
          isScrolling = false;
        }, 500);
      };

      // Handle keyboard navigation
      const handleKeyDown = (event) => {
        if (event.key === "ArrowDown" || event.key === "PageDown") {
          event.preventDefault();
          scrollToNextSection();
        } else if (event.key === "ArrowUp" || event.key === "PageUp") {
          event.preventDefault();
          scrollToPreviousSection();
        }
      };

      // Add click event listeners to the arrow buttons
      moreDownButton.addEventListener("click", scrollToNextSection);
      moreUpButton.addEventListener("click", scrollToPreviousSection);
      
      // Add keyboard navigation
      document.addEventListener("keydown", handleKeyDown);
      
      // Add scroll event listener with debounce for better performance
      let scrollTimeout;
      mainContainer.addEventListener("scroll", () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(handleScroll, 10);
      });
      
      // Initialize arrow visibility
      initializeArrows();
      
      // Clean up event listeners when component is destroyed
      return () => {
        document.removeEventListener("keydown", handleKeyDown);
        mainContainer.removeEventListener("scroll", handleScroll);
        moreDownButton.removeEventListener("click", scrollToNextSection);
        moreUpButton.removeEventListener("click", scrollToPreviousSection);
      };
    },
    { once: true }
  );
</script>
