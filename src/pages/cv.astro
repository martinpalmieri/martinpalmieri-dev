---
import workExperience from "../data/work-experience.json";
import { formatISODate } from "../utils/date-formatter";
import BaseLayout from "../layouts/BaseLayout.astro";
import ArrowIcon from "../components/ArrowIcon.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

interface WorkExperienceEntry {
  company: {
    name: string;
    img: string;
  };
  startDate: string;
  endDate: string | null;
  title: string;
  description: string;
}

const formatExperienceData = (data: WorkExperienceEntry[]) =>
  data.map((experience) => ({
    ...experience,
    startDate: formatISODate(experience.startDate),
    endDate: experience.endDate ? formatISODate(experience.endDate) : "Present"
  }));

const formattedExperienceData = formatExperienceData(workExperience as WorkExperienceEntry[]);
---

<BaseLayout title="Curriculum Vitae | Martín Palmieri" description="Professional experience and background of Martín Palmieri.">
  <Header />
  <main
    class="main-container h-[calc(100vh-62px)] w-full snap-y snap-mandatory overflow-y-scroll scroll-smooth lg:h-[calc(100vh-88px)]"
    aria-label="Professional experience timeline"
  >
    {
      formattedExperienceData.map(
        ({ company, title, startDate, endDate, description }) => (
          <section
            class="flex h-[calc(100vh-62px)] w-full snap-center flex-col items-start px-6 pt-10 md:px-10 lg:h-[calc(100vh-88px)] lg:flex-row"
          >
            <div class="mb-4 w-full lg:mb-0 lg:w-1/2 lg:pr-8">
              <h1 class="font-title text-4xl md:text-6xl lg:text-8xl">{company.name}</h1>
            </div>
            <div class="w-full lg:w-1/2">
              <h3 class="text-xl font-bold text-gray-700 md:text-2xl lg:text-3xl">
                {startDate} - {endDate}
              </h3>
              <h2 class="mb-3 text-2xl font-extrabold md:text-4xl lg:mb-4 lg:text-5xl">{title}</h2>
              <p class="text-lg font-normal leading-relaxed md:text-xl lg:text-2xl">{description}</p>
            </div>
          </section>
        )
      )
    }
  </main>
  <div class="fixed left-1/2 bottom-[100px] z-10 -translate-x-1/2 md:bottom-10 flex flex-col items-center">
    <ArrowIcon direction="up" />
    <ArrowIcon direction="down" />
  </div>
  <Footer />
</BaseLayout>

<script is:inline data-astro-rerun>
  document.addEventListener(
    "astro:page-load",
    () => {
      const mainContainer = document.querySelector<HTMLElement>(".main-container");
      const moreDownButton = document.querySelector<HTMLButtonElement>(
        '[data-direction="down"]'
      );
      const moreUpButton = document.querySelector<HTMLButtonElement>(
        '[data-direction="up"]'
      );

      if (!mainContainer || !moreDownButton || !moreUpButton) {
        console.error("One or more elements could not be found in the document.");
        return;
      }

      const sections = Array.from(
        mainContainer.querySelectorAll<HTMLElement>("section")
      );

      if (sections.length === 0) {
        console.error("No sections were found inside the main container.");
        return;
      }

      let sectionPositions = sections.map((section) => section.offsetTop);
      let activeIndex = 0;

      const setArrowVisibility = (index: number) => {
        moreUpButton.classList.toggle("invisible", index === 0);
        moreDownButton.classList.toggle(
          "invisible",
          index === sections.length - 1
        );
      };

      const getSectionPositions = () =>
        sections.map((section) => section.offsetTop);

      const scrollToIndex = (index: number) => {
        const targetPosition = sectionPositions[index];

        if (typeof targetPosition !== "number") {
          return;
        }

        activeIndex = index;
        setArrowVisibility(index);

        mainContainer.scrollTo({
          top: targetPosition,
          behavior: "smooth"
        });
      };

      const updateActiveIndexFromScroll = () => {
        const scrollMiddle = mainContainer.scrollTop + mainContainer.clientHeight / 2;
        let newIndex = 0;

        for (let index = 0; index < sectionPositions.length; index += 1) {
          if (scrollMiddle >= sectionPositions[index]) {
            newIndex = index;
          } else {
            break;
          }
        }

        if (newIndex !== activeIndex) {
          activeIndex = newIndex;
          setArrowVisibility(newIndex);
        }
      };

      const handleResize = () => {
        sectionPositions = getSectionPositions();
        updateActiveIndexFromScroll();
      };

      const scrollToNextSection = () => {
        const nextIndex = Math.min(activeIndex + 1, sections.length - 1);

        if (nextIndex !== activeIndex) {
          scrollToIndex(nextIndex);
        }
      };

      const scrollToPreviousSection = () => {
        const previousIndex = Math.max(activeIndex - 1, 0);

        if (previousIndex !== activeIndex) {
          scrollToIndex(previousIndex);
        }
      };

      const handleKeyDown = (event: KeyboardEvent) => {
        if (event.key === "ArrowDown" || event.key === "PageDown") {
          event.preventDefault();
          scrollToNextSection();
        } else if (event.key === "ArrowUp" || event.key === "PageUp") {
          event.preventDefault();
          scrollToPreviousSection();
        }
      };

      const handleScroll = () => {
        updateActiveIndexFromScroll();
      };

      const handleArrowClick = (event: MouseEvent) => {
        event.preventDefault();

        if (event.currentTarget === moreDownButton) {
          scrollToNextSection();
        } else {
          scrollToPreviousSection();
        }
      };

      moreDownButton.addEventListener("click", handleArrowClick);
      moreUpButton.addEventListener("click", handleArrowClick);
      document.addEventListener("keydown", handleKeyDown);
      mainContainer.addEventListener("scroll", handleScroll, { passive: true });
      window.addEventListener("resize", handleResize);

      window.requestAnimationFrame(() => {
        sectionPositions = getSectionPositions();
        updateActiveIndexFromScroll();
        setArrowVisibility(activeIndex);
      });

      const cleanup = () => {
        moreDownButton.removeEventListener("click", handleArrowClick);
        moreUpButton.removeEventListener("click", handleArrowClick);
        document.removeEventListener("keydown", handleKeyDown);
        mainContainer.removeEventListener("scroll", handleScroll);
        window.removeEventListener("resize", handleResize);
      };

      document.addEventListener(
        "astro:before-swap",
        () => {
          cleanup();
        },
        { once: true }
      );
    },
    { once: true }
  );
</script>
